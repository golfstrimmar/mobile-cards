

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

  +pro
  +Text-Style-
+font-family(Montserrat,500,15px,22px,#FFFFFF)
+font-family($family,$waight,$size,$line-height,$color)
+font-family(Montserrat,500,24px,29px,$f-color)

  calc(20px + (50-20)*((100vw-320px)/(1440-320))) 
  +absolute( 40px, 20px, 50%,  60%,  null,0,0)
  +absolute( $width, $height, $top,  $left,  $right,$x,$y) 
  @media (min-width: 0px) and (max-width: 1145px)
  +media-breakpoint-only(sm)
  +media-breakpoint-up(md)
  +media-breakpoint-down(lg)
  include  ./animals/connectForm
  @extend %procents
  +bg($back-fone)
  +bg($active)
  +bg($back-main)
  +border(1px,darken($active, 50%))
  +flex
  +fdc
  +center
  +jucc
  +jucs
  +juce
  +jucb
  +juca
  +alis 
  +alie
  +alic
  +alisc
  +alistretch
  +alib
  
   
.relative
   input.form-check-input(type='checkbox')
  darken()
  lighten( #3E2723, 50%)
  rgba(0, 0, 0, 0.95)

    box-shadow: 0px 8px 32px rgba(0, 0, 0, 0.12)
    box-shadow: 0px 5px 14px 4px rgba(0, 0, 0, 0.5)
   =========== адаптивное свойство
    padding: 0 calc(minpx + (50-min)*((100vw-320px)/(1200-320))) 0
    будет работать от 1200 до 320
    container: max-width: 1200px
    минимальное значение окна  --- 320
      максимальное значение окна  --- 1200


   ==========================
      @media (min-width: 768px)
      @media (min-width: ) and (max-width: )
      @media (max-width: )

   //-- дает прозрачность--->  rgba(0, 0, 0, 0.95)
   //-- просто высветляет ---> lighten( , 50%)

------------изображения так
   img(src="assets/img/buscet/buscet-1.webp",alt="") 


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
==SASS======SASS======SASS======SASS======SASS======
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


.hoverable {.special & {}}======= класс меняет свойтва в зависимости от родителя (не работает)

%prominent
@extend %prominent;  --добавляет свойства без доьавления класса prominent

@extend .prominent; ---добавит все свойства класса .prominent  все-таки потянется в конечный файл css 
color: lighten($color_success, 50%)

.hoverable {  &.special  {}}  === .hoverable  .special

$color_success: cyan
color: lighten($color_success, 50%)

@mixin box-shadow
  box-shadow: 0px 5px 14px 4px rgba(0, 0, 0, 0.5)
  
@include box-shadow

<!-- в sass перебор в цикле -->
@for $i from 1 through 12
  .col-#{$i}
    background-color: lighten(#0D47A1, $i * 8%)



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
==FLEX========FLEX========FLEX========FLEX========FLEX========FLEX======
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

например три блока. их нужно сделать в пропорции 1/3/3. но их ширина в сумме не 100%
тогда 

flex: 0 0 10%
flex: 0 0 30%
flex: 0 0 30%

это камни

если внутри нет большого слова, которое распирает больше чем 10% они будут уменьшаться в этой пропорции до ширины максимального слова но так и не перейдут на новую строку.
потом блок не уменьшается а переходит на другую строку. 
если есть внутри большое слово и все это не работает. нао ставить тогда overflow: hidden
или overflow: scroll. лучше сразу overflow: scroll

стоит тоько сделать так, то блок полностью займет свободное пространство-- в данном случае 40%. он стал пружиной остальные блоки меньше 30% не станут
flex: 1 0 10%
flex: 0 0 30%
flex: 0 0 30%
 
это хорошо когда нужно сделать один блок из трех стретчевым.

===pug ======pug=======pug======

----------цикл однотипных блоков

.wrapper
  - 
    items = [
      { 
        title: " ",
            : " ",
            : "  ",
            : "  ",
            : ""
            },
    ]

  each item in items
    ............html..................
    ..............................

------вывод одинаковых блоков в больших количествах
- for (var x = 0; x < 30; x++)
  li item


=============================================================
slick slick slick slick slick slick slick slick
==============================================================
для того, чтобы между слайдами былотступ и они не вылазили за контейнер ---

.slider-js
  margin: 0 -10px

.slick-slide
  padding: 0 10px

----------------------для контейнера--------------------------------------
grid-template-columns: 1fr 2fr  3fr
grid-template-columns: min-content 200px max-content
grid-template-columns: 100px 200px minmax(100px,300px)
grid-template-columns:  repeat(3, 1fr)
grid-template-columns: 1fr 2fr  3fr
grid-template-columns:  repeat(3, 1fr)

grid-template-rows: repeat(3, 1fr)

grid-column-gap: 15px
grid-row-gap: 15px
grid-gap: 15px
grid-template-columns:  repeat(12,[col] 1fr)
grid-template-rows: repeat(8,[row] 1fr)


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

grid-template-columns:  repeat(auto-fill, minmax(100px, 1fr))

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



repeat(auto-fill,100px);--------каждая строка заполнена возможным количеством колонок, учитывая их длину в 100px. Когда в строке не остается места, то элементы переходят на следующую строку.
grid-template-columns:  repeat(auto-fill, minmax(100px, 1fr))------Сейчас браузер уместит в строку столько колонок с минимальной шириной в 100px, сколько он сможет. А если останется ещё место, то оно будет поровну распределено между всеми автозаполненными колонками.
auto-fit будет вести себя почти как auto-fill, но если есть только одна строка и есть место для дополнительных колонок, но нет элементов, которые можно вставить эти колонки, то тогда он сделает ширину пустых колонок равную нулю

auto-fit  --дотягивает элементы. пустое пространство исчезнет

grid-template-areas: "area1 area2" "area1 area2"  "area1 area2"  "area1 area2"
repeat(2,auto)



--------------------для блоков-----------------
grid-column-start: 3
grid-column-end: 4

grid-row-start: 3
grid-row-end: 4

grid-column:3/4
grid-row:3/4

grid-area: 1/3/4/4
grid-area:  grid-row-start/grid-column-start/grid-row-end/grid-column-end

grid-column:  col 1/span 4
grid-row: row 3/row 9

grid-column:  span 2


justify-content: start 
justify-content: center 
justify-content: space-around 
justify-content: space-between 
justify-content: space-evenly 
justify-content: end
justify-content: stretch

align-content: start 
align-content: center 
align-content: space-around
align-content: space-evenly  
align-content: space-between 
align-content: stretch


----------выравнивание к контейнеру------
align-items: start
align-items: end
align-items: center
align-items: stretch


justify-items: start
justify-items: end
justify-items: center
justify-items: stretch


---------выравнивание к элементу----------
align-self: start
align-self: end
align-self: center
align-self: stretch

justify-self: start
justify-self: end
justify-self: center
justify-self: stretch


---------------
grid-auto-flow: row
grid-auto-flow: row dense
grid-auto-flow: column

---------------
order: 1